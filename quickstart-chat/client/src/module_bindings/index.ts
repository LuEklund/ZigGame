// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit ).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Connect } from "./connect_reducer.ts";
export { Connect };
import { Disconnect } from "./disconnect_reducer.ts";
export { Disconnect };
import { MoveAllPlayers } from "./move_all_players_reducer.ts";
export { MoveAllPlayers };
import { SpawnFood } from "./spawn_food_reducer.ts";
export { SpawnFood };
import { UpdatePlayerInput } from "./update_player_input_reducer.ts";
export { UpdatePlayerInput };

// Import and reexport all table handle types
import { CircleTableHandle } from "./circle_table.ts";
export { CircleTableHandle };
import { ConfigTableHandle } from "./config_table.ts";
export { ConfigTableHandle };
import { EntityTableHandle } from "./entity_table.ts";
export { EntityTableHandle };
import { FoodTableHandle } from "./food_table.ts";
export { FoodTableHandle };
import { LoggedOutPlayerTableHandle } from "./logged_out_player_table.ts";
export { LoggedOutPlayerTableHandle };
import { MoveAllPlayersTimerTableHandle } from "./move_all_players_timer_table.ts";
export { MoveAllPlayersTimerTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { SpawnFoodTimerTableHandle } from "./spawn_food_timer_table.ts";
export { SpawnFoodTimerTableHandle };

// Import and reexport all types
import { Circle } from "./circle_type.ts";
export { Circle };
import { Config } from "./config_type.ts";
export { Config };
import { DbVector2 } from "./db_vector_2_type.ts";
export { DbVector2 };
import { Entity } from "./entity_type.ts";
export { Entity };
import { Food } from "./food_type.ts";
export { Food };
import { MoveAllPlayersTimer } from "./move_all_players_timer_type.ts";
export { MoveAllPlayersTimer };
import { Player } from "./player_type.ts";
export { Player };
import { SpawnFoodTimer } from "./spawn_food_timer_type.ts";
export { SpawnFoodTimer };

const REMOTE_MODULE = {
  tables: {
    circle: {
      tableName: "circle",
      rowType: Circle.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: Circle.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    config: {
      tableName: "config",
      rowType: Config.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Config.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    entity: {
      tableName: "entity",
      rowType: Entity.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: Entity.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    food: {
      tableName: "food",
      rowType: Food.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: Food.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    logged_out_player: {
      tableName: "logged_out_player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    move_all_players_timer: {
      tableName: "move_all_players_timer",
      rowType: MoveAllPlayersTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: MoveAllPlayersTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    spawn_food_timer: {
      tableName: "spawn_food_timer",
      rowType: SpawnFoodTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: SpawnFoodTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    connect: {
      reducerName: "connect",
      argsType: Connect.getTypeScriptAlgebraicType(),
    },
    disconnect: {
      reducerName: "disconnect",
      argsType: Disconnect.getTypeScriptAlgebraicType(),
    },
    move_all_players: {
      reducerName: "move_all_players",
      argsType: MoveAllPlayers.getTypeScriptAlgebraicType(),
    },
    spawn_food: {
      reducerName: "spawn_food",
      argsType: SpawnFood.getTypeScriptAlgebraicType(),
    },
    update_player_input: {
      reducerName: "update_player_input",
      argsType: UpdatePlayerInput.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.3.2",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Connect", args: Connect }
| { name: "Disconnect", args: Disconnect }
| { name: "MoveAllPlayers", args: MoveAllPlayers }
| { name: "SpawnFood", args: SpawnFood }
| { name: "UpdatePlayerInput", args: UpdatePlayerInput }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("connect", callback);
  }

  removeOnConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("connect", callback);
  }

  onDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("disconnect", callback);
  }

  removeOnDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("disconnect", callback);
  }

  moveAllPlayers(timer: MoveAllPlayersTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    MoveAllPlayers.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_all_players", __argsBuffer, this.setCallReducerFlags.moveAllPlayersFlags);
  }

  onMoveAllPlayers(callback: (ctx: ReducerEventContext, timer: MoveAllPlayersTimer) => void) {
    this.connection.onReducer("move_all_players", callback);
  }

  removeOnMoveAllPlayers(callback: (ctx: ReducerEventContext, timer: MoveAllPlayersTimer) => void) {
    this.connection.offReducer("move_all_players", callback);
  }

  spawnFood(timer: SpawnFoodTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    SpawnFood.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_food", __argsBuffer, this.setCallReducerFlags.spawnFoodFlags);
  }

  onSpawnFood(callback: (ctx: ReducerEventContext, timer: SpawnFoodTimer) => void) {
    this.connection.onReducer("spawn_food", callback);
  }

  removeOnSpawnFood(callback: (ctx: ReducerEventContext, timer: SpawnFoodTimer) => void) {
    this.connection.offReducer("spawn_food", callback);
  }

  updatePlayerInput(direction: DbVector2) {
    const __args = { direction };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerInput.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_input", __argsBuffer, this.setCallReducerFlags.updatePlayerInputFlags);
  }

  onUpdatePlayerInput(callback: (ctx: ReducerEventContext, direction: DbVector2) => void) {
    this.connection.onReducer("update_player_input", callback);
  }

  removeOnUpdatePlayerInput(callback: (ctx: ReducerEventContext, direction: DbVector2) => void) {
    this.connection.offReducer("update_player_input", callback);
  }

}

export class SetReducerFlags {
  moveAllPlayersFlags: CallReducerFlags = 'FullUpdate';
  moveAllPlayers(flags: CallReducerFlags) {
    this.moveAllPlayersFlags = flags;
  }

  spawnFoodFlags: CallReducerFlags = 'FullUpdate';
  spawnFood(flags: CallReducerFlags) {
    this.spawnFoodFlags = flags;
  }

  updatePlayerInputFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerInput(flags: CallReducerFlags) {
    this.updatePlayerInputFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get circle(): CircleTableHandle {
    return new CircleTableHandle(this.connection.clientCache.getOrCreateTable<Circle>(REMOTE_MODULE.tables.circle));
  }

  get config(): ConfigTableHandle {
    return new ConfigTableHandle(this.connection.clientCache.getOrCreateTable<Config>(REMOTE_MODULE.tables.config));
  }

  get entity(): EntityTableHandle {
    return new EntityTableHandle(this.connection.clientCache.getOrCreateTable<Entity>(REMOTE_MODULE.tables.entity));
  }

  get food(): FoodTableHandle {
    return new FoodTableHandle(this.connection.clientCache.getOrCreateTable<Food>(REMOTE_MODULE.tables.food));
  }

  get loggedOutPlayer(): LoggedOutPlayerTableHandle {
    return new LoggedOutPlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.logged_out_player));
  }

  get moveAllPlayersTimer(): MoveAllPlayersTimerTableHandle {
    return new MoveAllPlayersTimerTableHandle(this.connection.clientCache.getOrCreateTable<MoveAllPlayersTimer>(REMOTE_MODULE.tables.move_all_players_timer));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get spawnFoodTimer(): SpawnFoodTimerTableHandle {
    return new SpawnFoodTimerTableHandle(this.connection.clientCache.getOrCreateTable<SpawnFoodTimer>(REMOTE_MODULE.tables.spawn_food_timer));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
